---
import Layout from '../../layouts/LessonLayout.astro';
import { getCollection } from 'astro:content';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';

// Get all lesson files from the "lessons" collection
const lessons = await getCollection('lessons');
// console.log(lessons)

// Group lessons by the folder name (i.e. the first part of the `lesson.id` before the "/")
const groupedLessons = lessons.reduce((groups: { [key: string]: typeof lessons }, lesson) => {
  const folder = lesson.id.split('/')[0];
  // console.log(folder)
  if (!groups[folder]) {
    groups[folder] = [];
  }
  groups[folder].push(lesson);
  return groups;
}, {});

// Convert the grouped object to an array for easier iteration.
const groupedLessonsArray = Object.entries(groupedLessons);
// console.log(groupedLessonsArray)
// goes to lessons array, which is a list of lists. then each list has the folder name and a list of objects. each object is a lesson file in that folder. those objects have data, including: id (the file path), slug (it's the same as the filepath but with dangler left off, like without ".md"), body (the content of the file), collection (the collection name), data (the frontmatter data), render (the rendered content)
// console.log(groupedLessonsArray[0][1][0].data.title)
---

<!-- <Layout groupedLessonsArray={groupedLessonsArray} /> -->

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>Accessibility Course</title>
  </head>
  <body>
    <Header />
    <main id="main-content">
      <aside role="navigation" aria-label="Lessons Navigation">
        {
          groupedLessonsArray.map(([folder, lessonObject], index) => {
            console.log(`lesson group: ${lessonObject}`)
            lessonObject.sort((a, b) => a.data.order - b.data.order);
            // console.log(`lesson group after sort: ${lessonObject[0].data}`)

            return (
              <div>
                <h2>Lesson {index + 1}: {lessonObject[0].data.title}</h2>
                <ul>
                  {
                    lessonObject.map((subLesson) => {
                      // console.log(`subLesson.id: ${subLesson.id}`)

                      // every file has to be in a sub folder for this to work, otherwise it won't have a '/' to work with and will break.
                      const fileName = subLesson.id.split('/')[1];
                      // console.log(`fileName: ${fileName}`)

                      let label = fileName.replace('.md', '').replace('-', ' ');
                      label = label.charAt(0).toUpperCase() + label.slice(1);

                      if (folder.includes('intro') && fileName === 'instruction.md') {
                        label = 'Introduction';
                      } else {
                        label = `${lessonObject[0].data.title}: ${label}`;
                      }

                      return (
                        <li>
                          <a 
                            href={`/lessons/${subLesson.slug}`}
                            class="text-xl font-semibold text-blue-600 hover:underline"
                          >
                            {label}
                          </a>
                        </li>
                      );
                    })
                  }
                </ul>
              </div>
            );
          })
        }
      </aside>

      <slot></slot>
    </main>
    <Footer />
  </body>
</html>
