---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

import "../styles/global.css";

interface Lesson {
  id: string;
  slug: string;
  body: string;
  collection: string;
  data: Record<string, any>;
  render: any;
}

interface Props {
  groupedLessonsArray: [string, Lesson[]][];
}

const { groupedLessonsArray } = Astro.props;
// console.log(groupedLessonsArray);
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Accessibility Course</title>
  </head>
  <body class="bg-[#f1f5f9] font-sans">
    <!-- Skip link (custom CSS from your global.css still applies) -->
    <a class="skip-link" href="#main-content">Skip to content</a>
    
    <Header />
    
    <!-- Flex container for aside and main content -->
    <div class="flex w-full">
      <!-- Aside: fixed width, flush with left edge, blue background -->
      <aside 
        id="merged-sidebar"
        role="navigation" 
        aria-label="Lessons Navigation"
        class="w-72 overflow-y-auto bg-blue-100 dark:bg-blue-900 px-3 py-4"
      >
        <!-- Dynamic Lesson Links -->
        {groupedLessonsArray.map(([folder, lessons], index) => {
          lessons.sort((a, b) => {
            const aFileName = a.id.split('/')[1];
            const bFileName = b.id.split('/')[1];
            
            // Place instruction.md first regardless of order property
            if (aFileName === 'instruction.md' && bFileName !== 'instruction.md') {
              return -1;
            }
            if (bFileName === 'instruction.md' && aFileName !== 'instruction.md') {
              return 1;
            }
            
            // Otherwise, sort by the order property
            return a.data.order - b.data.order;
          });
          return (
            <div class="mb-6">
              <h2 class="mb-2 pl-2 text-lg font-bold">
                Lesson {index + 1}: {lessons[0].data.title}
              </h2>
              <ul class="pl-4 space-y-2 font-medium">
                {lessons.map((subLesson) => {
                  const fileName = subLesson.id.split('/')[1];
                  let label = fileName.replace('.md', '').replace('-', ' ');
                  label = label.charAt(0).toUpperCase() + label.slice(1);
  
                  if (folder.includes('intro') && fileName === 'instruction.md') {
                    label = 'Introduction';
                  } else {
                    label = `${lessons[0].data.title}: ${label}`;
                  }
  
                  return (
                    <li class="block p-2 text-gray-900 rounded-lg hover:bg-gray-100">
                      <a 
                        href={`/lessons/${(subLesson as any).slug}`}
                        class="text-xl font-semibold text-blue-600 hover:underline"
                        title={label}
                      >
                        {label}
                      </a>
                    </li>
                  );
                })}
              </ul>
            </div>
          );
        })}
      </aside>
      
      <!-- Main content: takes up remaining space, left aligned -->
      <main id="main-content" class="flex-1 mx-0 pl-10">
        <div class="max-w-[80ch] p-4">
          <slot></slot>
        </div>
      </main>
    </div>
    
    <Footer />
  </body>
</html>
