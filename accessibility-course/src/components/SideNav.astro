---
import { getGroupedLessons } from "../utils/getGroupedLessons";

// Get the lesson groups from your utility function
const rawGroups = await getGroupedLessons();

// Make sure it's an array to avoid crashes
const safeGrouped = Array.isArray(rawGroups) ? rawGroups : [];

// Format each group (same as before)
const formattedLessonsArray = safeGrouped.map(([folder, lessons], i) => {
  const title = folder
    .replace(/^\d+_/, "")
    .replace(/-/g, " ")
    .replace(/\b\w/g, (char) => char.toUpperCase());

  return { index: i + 1, title, lessons };
});
---

<div
  id="merged-sidebar"
  class="bg-lightgray p-4 w-80 lg:w-96 self-stretch
         transition-transform duration-300 ease-in-out
         transform -translate-x-full sidebar-open:translate-x-0 lg:transform-none lg:translate-x-0"
  role="navigation"
  aria-label="Sidebar Navigation"
>
  {
    Astro.url.pathname.startsWith("/lessons") && (
      <button
        class="lg:hidden absolute top-4 right-4 z-50 p-2 text-primary"
        onclick="window.closeSidebar?.()"
        aria-label="Close sidebar"
      >
        <span class="material-symbols--arrow-back-ios-new-rounded text-primary text-2xl" />
      </button>
    )
  }

  {
    formattedLessonsArray.map(({ index, title, lessons }) => (
      <div class="mb-6">
        <h2 class="mb-2 pl-2 text-lg font-black text-darkergray">
          Lesson {index}: {title}
        </h2>
        <ul class="pl-4 space-y-2 font-medium side-nav">
          {lessons
            .filter((lesson) => !lesson.id.endsWith("home.md"))
            .map((lesson) => (
              <li>
                <a
                  href={`/lessons/${lesson.slug}`}
                  id="sidenav-links"
                  class="block w-full p-2 rounded-lg text-md transition font-bold"
                >
                  {lesson.data.title}
                </a>
              </li>
            ))}
        </ul>
      </div>
    ))
  }
</div>
