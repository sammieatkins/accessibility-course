---
import type Lesson from "../types/Lesson";
const { groupedLessonsArray, slug } = Astro.props as {
  groupedLessonsArray: [string, Lesson[]][];
  slug: string;
};

const currentSlug = slug;

const formattedLessonsArray = groupedLessonsArray
  .filter(
    (group): group is [string, Lesson[]] =>
      Array.isArray(group) &&
      typeof group[0] === "string" &&
      Array.isArray(group[1])
  )
  .map(([folder, lessons], i) => {
    const title = folder
      .replace(/^\d+_/, "")
      .replace(/-/g, " ")
      .replace(/\b\w/g, (char) => char.toUpperCase());

    return { index: i + 1, title, lessons };
  });
---

<div class="lesson-nav-container responsive-lesson-nav">
  {
    (() => {
      const allLessons = formattedLessonsArray
        .flatMap(({ lessons }) =>
          lessons.filter((lesson) => !lesson.id.endsWith("home.md"))
        )
        .sort((a, b) => (a.data.order ?? 99) - (b.data.order ?? 99));

      const normalize = (s: string) => s.replace(/\/$/, "").toLowerCase();

      const currentIndex = allLessons.findIndex(
        (lesson) => normalize(lesson.slug) === normalize(currentSlug)
      );

      const prevLesson = currentIndex > 0 ? allLessons[currentIndex - 1] : null;
      const nextLesson =
        currentIndex < allLessons.length - 1
          ? allLessons[currentIndex + 1]
          : null;

      return (
        <>
          {/* Left column (Previous) */}
          {prevLesson ? (
            <a
              href={`/lessons/${prevLesson.slug}`}
              class="lesson-nav-link"
              aria-label="Previous lesson"
            >
              ← Previous Lesson
            </a>
          ) : (
            <div />
          )}

          <span class="text-center text-text-color font-bold">
            {formattedLessonsArray
              .map(({ index, title, lessons }) => {
                const currentLesson = lessons.find(
                  (lesson) => lesson.slug === currentSlug
                );
                if (!currentLesson) return null;

                let fileName =
                  currentLesson.id
                    .split("/")
                    .pop()
                    ?.replace(/\.mdx?$/, "")
                    .replace("-", " ") || "Unknown";
                fileName = fileName.charAt(0).toUpperCase() + fileName.slice(1);

                console.log("fileName", fileName);
                console.log("title", title);
                console.log("index", index);
                console.log("HELLOOOOOO");

                return `Lesson ${index}: ${title} | ${fileName}`;
              })
              .filter(Boolean)[0] || "Lesson Title Not Found"}
          </span>

          {nextLesson ? (
            <a
              href={`/lessons/${nextLesson.slug}`}
              class="lesson-nav-link"
              aria-label="Next lesson"
            >
              Next Lesson →
            </a>
          ) : (
            <div />
          )}
        </>
      );
    })()
  }
</div>
