---
import { getGroupedLessons } from "../utils/getGroupedLessons";
import type Lesson from "../types/Lesson";

const rawGroups = await getGroupedLessons();
const groupedLessonsArray = Array.isArray(rawGroups) ? rawGroups : [];

const formattedLessonsArray = groupedLessonsArray
  .filter(
    (entry): entry is [string, Lesson[]] =>
      Array.isArray(entry) && entry.length === 2
  )
  .map(([folder, lessons], i) => {
    const title = folder
      .replace(/^\d+_/, "")
      .replace(/-/g, " ")
      .replace(/\b\w/g, (char) => char.toUpperCase());

    return {
      index: i + 1,
      title,
      folder,
      lessons,
    };
  });
---

<div class="bg-white shadow-md rounded-lg overflow-hidden">
  {
    formattedLessonsArray.map(({ index, title, lessons }) => (
      <div class="border-b border-muted">
        <h3 class="bg-lightgray text-text px-4 py-2 font-semibold text-lg m-0">
          Lesson {index}: {title}
        </h3>
        {(() => {
          const visibleLessons = lessons.filter(
            (lesson) => !lesson.id.endsWith("home.md")
          );
          const hasMultiple = visibleLessons.length > 1;

          return (
            <div class={hasMultiple ? "divide-y divide-gray-200" : ""}>
              {visibleLessons.map((lesson) => {
                return (
                  <a
                    href={`/lessons/${lesson.slug}`}
                    id="lesson-link"
                    class="flex items-center justify-between p-2 hover:bg-lightgray transition"
                  >
                    <div class="ml-10 flex items-center space-x-3">
                      <span class="text-lg font-medium">
                        {lesson.data.title}
                      </span>
                    </div>
                    <span id="lesson-start" class="start-button">
                      Start
                    </span>
                  </a>
                );
              })}
            </div>
          );
        })()}
      </div>
    ))
  }
</div>
